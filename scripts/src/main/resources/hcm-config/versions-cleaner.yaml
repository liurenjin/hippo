<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2013 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<sv:node sv:name="VersionsCleaner" xmlns:sv="http://www.jcp.org/jcr/sv/1.0">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposys:updaterinfo</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:description" sv:type="String">
    <sv:value>VersionsCleaner is a script that visits document nodes and cleans up the version history.&#xd;
It can retain retainCount number and daysToKeep days of latest versions.&#xd;
For each node, it checks all its versions: if the age of the version is older than the daysToKeep and 
there are more versions than retainCount, then it deletes the version.&#xd;</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:parameters" sv:type="String">
    <sv:value>{ "retainCount": 2, "daysToKeep": 30 }</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:batchsize" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:dryrun" sv:type="Boolean">
    <sv:value>false</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:query" sv:type="String">
    <sv:value>//element(*, mix:versionable)</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:script" sv:type="String">
<sv:value>
/**&#xd;
 * VersionsCleaner is a script that visits document nodes and cleans up the version history.&#xd;
 * It can retain retainCount number and daysToKeep days of latest versions.&#xd;
 * For each node, it checks all its versions: if the age of the version is older&#xd;
 * than the daysToKeep and there are more versions than retainCount, then it deletes the version.&#xd;
 */&#xd;
&#xd;
package org.hippoecm.frontend.plugins.cms.dev.updater&#xd;
&#xd;
import org.onehippo.repository.update.BaseNodeUpdateVisitor&#xd;
&#xd;
import javax.jcr.Node&#xd;
import javax.jcr.version.Version&#xd;
import javax.jcr.version.VersionManager&#xd;
import javax.jcr.version.VersionHistory&#xd;
&#xd;
import java.util.ArrayList&#xd;
import java.util.Collections&#xd;
import java.util.List&#xd;
&#xd;
/**&#xd;
 * Truncates the version history, retaining only the latest&#xd;
 * ${retainCount} versions.&#xd;
 */&#xd;
class VersionsCleaner extends BaseNodeUpdateVisitor {&#xd;
&#xd;
  /** The default number of versions to retain.*/&#xd;
  int defaultRetainCount = 2;&#xd;
  /** The default number of days to keep versions.*/&#xd;
  int defaultDaysToKeep = 30;&#xd;
  &#xd;
  /** The number of versions to retain. Must be at least 1. */&#xd;
  int retainCount;&#xd;
  /** The number of days to keep versions. Must be at least 1 to keep history or 0 in which case only retainCount is used. */&#xd;
  int daysToKeep;&#xd;
  &#xd;
  void initialize(Session session) {&#xd;
    retainCount = parametersMap.get("retainCount", defaultRetainCount)&#xd;
    daysToKeep = parametersMap.get("daysToKeep", defaultDaysToKeep)&#xd;
    if (retainCount &lt; 1) {&#xd;
      retainCount = 1&#xd;
    }&#xd;
    if (daysToKeep &lt; 0) {&#xd;
      daysToKeep = 0&#xd;
    }&#xd;
    log.info "VersionsCleaner initialized with parameters: { retainCount: ${retainCount}, daysToKeep: ${daysToKeep} }"&#xd;
    &#xd;
  }&#xd;
  &#xd;
  boolean doUpdate(Node node) {&#xd;
    log.debug "Updating node ${node.path}"&#xd;
    &#xd;
    // gather versions&#xd;
    List versions = new ArrayList()&#xd;
    VersionManager versionManager = node.getSession().getWorkspace().getVersionManager()&#xd;
    Version baseVersion = versionManager.getBaseVersion(node.getPath())&#xd;
    VersionHistory versionHistory = versionManager.getVersionHistory(node.getPath())&#xd;
    VersionIterator allVersions = versionHistory.getAllVersions()&#xd;
    while (allVersions.hasNext()) {&#xd;
      Version version = allVersions.nextVersion()&#xd;
      Calendar created = version.getCreated();&#xd;
      Calendar daysOld = Calendar.getInstance();&#xd;
      daysOld.add(Calendar.DAY_OF_MONTH, -daysToKeep);&#xd;
      if (created.before(daysOld)) {&#xd;
        if (!version.getName().equals("jcr:rootVersion")) {&#xd;
          versions.add(version);&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
    // remove versions&#xd;
    int removeCount = versions.size() - retainCount&#xd;
    boolean remove = removeCount &gt; 0&#xd;
    if (remove) {&#xd;
      log.info "Removing ${removeCount} versions of node ${node.path}"&#xd;
    }&#xd;
    while (removeCount &gt; 0) {&#xd;
      Version version = versions.remove(0);&#xd;
      versionHistory.removeVersion(version.getName())&#xd;
      removeCount--;&#xd;
    }&#xd;
    return remove&#xd;
  }&#xd;
  &#xd;
  boolean undoUpdate(Node node) {&#xd;
    throw new UnsupportedOperationException('Updater does not implement undoUpdate method')&#xd;
  }&#xd;
&#xd;
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:throttle" sv:type="Long">
    <sv:value>1000</sv:value>
  </sv:property>
</sv:node>
